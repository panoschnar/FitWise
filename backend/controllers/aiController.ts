import { Request, Response } from "express";
import { prisma } from "../utils/prismaClient";
import { asyncHandler } from "../utils/asyncHandler";

const HF_API_KEY = process.env.HF_API_KEY;
const HF_MODEL = "openai/gpt-oss-20b:novita";

export const generateAndSavePlan = asyncHandler(
  async (req: Request, res: Response) => {
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({ error: "userId is required" });
    }

    //  Fetch the user
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: { metrics: true, goals: true, preferences: true },
    });

    if (!user) return res.status(404).json({ error: "User not found" });
    // Create AI prompt dynamically
    const prompt = `
    You are a certified fitness coach and exercise physiologist.
        Generate a 7-day diet plan, exercise plan, and daily nutrition summary for a user.
        Return the result in the following JSON structure EXACTLY like this:

        {
        "myPlans": {
            "create": [
            {
                "dietPlan": [
                { "day": "Monday", "meals": [{ "name": "Breakfast", "item": "Oats + berries", "grams": 50, "calories": 200, "protein": 6, "carbs": 35, "fats": 4 }, ...] },
                ...
                ],
                "exercisePlan": [
                { "day": "Monday", "exercises": [{ name: "Squats", type: "STRENGTH", sets: 3, reps: 12 }, ...], "restDay": false },
                ...
                ],
                "nutritionSummary": [
                { "day": "Monday", "calories": 2200, "protein": 150, "carbs": 250, "fats": 70 },
                ...
                ]
            }
            ]
        }
        }

        The user details are:
        - Name: ${user.name}
        - Email: ${user.email}
        - Gender: ${user.gender || "unspecified"}
        - Height: ${user.height || "unspecified"}
        - BirthDate: ${user.birthDate || "unspecified"}
        - Role: ${user.role}
        - Preferences: ${JSON.stringify(user.preferences || {})}
        - Goals: ${JSON.stringify(user.goals || {})}
        - Metrics: ${JSON.stringify(user.metrics?.[user.metrics.length - 1] || [])}

        Rules:
        - Never output 0g for any food.
        - If unsure, estimate a realistic portion (e.g. 50g–300g).
        - Calories must correspond roughly to amounts.
        - Each meal must contain 1–3 items.
        - Each meal should be unique or max 2 times.
        - Each meal must NOT contain something for the allergies or dislikes on Preferences of the user.
        - Meals should cover the day: breakfast, morning snack, lunch, evening snack, dinner.
        - Make sure the JSON is valid and matches the Prisma MyPlan schema.
        - Use the user's preferences, goals, and metrics to customize diet, exercise, and daily nutrition.
        - The exercises should **match the training type**.
        - Avoid generic names like "Dance Workout" or "Running x1".
        - Instead, use **specific, professional exercise names** and structure.
        - Include **sets, reps or duration**, **intensity**, and optional **rest times**.
        - If the training type is skill-based (e.g. Dance, Yoga, Pilates), describe it as a **routine or flow** with structure, not “x1 workout”.
        - All exercises must have realistic duration or rep counts.
        - The results must be in Greek!!!
        `;

    //  Call Hugging Face AI
    const aiResponse = await fetch(
      "https://router.huggingface.co/v1/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${HF_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: HF_MODEL,
          messages: [{ role: "user", content: prompt }],
        }),
      }
    );

    const data = await aiResponse.json();
    console.log("Response here:",data)
  //  Extract AI text
  let aiText: string;
  try {
    aiText = data.choices?.[0]?.message?.content || data.generated_text || "";
    if (!aiText) throw new Error("No text generated by AI");
  } catch (err) {
    return res.status(500).json({ message: "AI generation failed", error: err });
  }

  //  Parse JSON safely
  let myPlans;
  try {
    const match = aiText.match(/\{[\s\S]*\}/); 
    if (!match) throw new Error("No JSON found in AI response");
    myPlans = JSON.parse(match[0]);
    console.log(myPlans)
  } catch (err) {
    return res.status(500).json({ message: "Failed to parse AI JSON", error: err });
  }

  // Create MyPlan in Prisma
  try {
    const createdPlans = await prisma.myPlan.createMany({
      data: myPlans.myPlans.create.map((plan: any) => ({
        userId: user.id,
        dietPlan: plan.dietPlan,
        exercisePlan: plan.exercisePlan,
        nutritionSummary: plan.nutritionSummary,
      })),
    });

    //  Return created plans
    return res.status(201).json({ message: "Plans created successfully", createdPlans });
  } catch (err) {
    return res.status(500).json({ message: "Failed to save plans", error: err });
  }
});